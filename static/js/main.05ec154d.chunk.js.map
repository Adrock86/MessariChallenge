{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["axios","require","useStyles","makeStyles","welcomeMsg","margin","textAlign","from","opacity","to","loading","animationName","animationDuration","animationTimingFunction","animationIterationCount","height","width","padding","option","fontSize","marginRight","chartCard","tableContainer","border","background","borderRadius","boxShadow","display","color","flexDirection","statsContainer","justifyContent","stats","tokenDataObj","symbol","slug","name","StyledACTextField","withStyles","root","borderBottomColor","borderColor","TextField","tokenMetricData","market_data","price_usd","price_btc","volume_last_24_hours","marketcap","current_marketcap_usd","App","classes","React","useState","allTokens","setAllTokens","selectedToken","setSelectedToken","selectedTokenMetricTimeData","setSelectedTokenMetricTimeData","selectedTokenMetricData","setSelectedTokenMetricData","internationalNumberFormat","Intl","NumberFormat","useEffect","getTokenList","catch","errResp","console","error","getTokenMetricData","getTokenTimeMetricData","a","get","messariTokenListResp","data","tokenData","messariTokenMetricDataResp","messariTokenMetricTimeDataResp","values","handleGraph","timeData","quoteSymbol","dataTable","anychart","table","addData","mapping","mapAs","open","high","low","close","value","chart","stock","title","plot","yGrid","xGrid","yMinorGrid","xMinorGrid","series","candlestick","legendItem","iconType","volumePlot","yAxis","labels","format","crosshair","yLabel","column","scroller","area","container","draw","ui","rangePicker","render","rangeSelector","enabled","className","length","Autocomplete","id","style","options","onChange","event","newValue","autoHighlight","getOptionLabel","renderOption","Fragment","renderInput","params","label","variant","inputProps","autoComplete","Card","toFixed","instance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05ec154d.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField, { FilledTextFieldProps, OutlinedTextFieldProps, StandardTextFieldProps } from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport AnyChart from 'anychart-react';\n// @ts-ignore\nimport anychart from 'anychart';\n\nconst axios = require('axios');\n\nconst useStyles = makeStyles({\n  welcomeMsg: {\n    margin: '0 12px 12px 12px',\n    textAlign: 'center'\n  },\n  '@keyframes blinker': {\n    from: { opacity: 1 },\n    to: { opacity: 0 },\n  },\n  loading:{\n    animationName: '$blinker',\n    animationDuration: '1s',\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite',\n    margin: 'auto',\n    height: '100%',\n    width: '100%',\n    textAlign: 'center',\n    padding: '36px'\n  },\n  option: {\n    fontSize: 15,\n    '& > span': {\n      marginRight: 10,\n      fontSize: 18\n    }\n  },\n  chartCard: {\n    width: '800px',\n    margin: 'auto'\n  },\n  tableContainer: {\n    border: '1px solid #a59393',\n    background: 'black',\n    borderRadius: '10px',\n    margin: '16px auto',\n    padding: '24px',\n    boxShadow: '3px 3px 3px #000',\n    width: '90%',\n    display: 'flex',\n    color: 'lightgray',\n    flexDirection: 'column'\n  },\n  statsContainer: {\n    display: 'flex',\n    justifyContent: 'space-around'\n  },\n  stats: {\n    width: '49%',\n    padding: '12px 8px'\n  }\n});\n\ninterface ITokenData {\n  symbol: string;\n  slug: string;\n  name: string;\n}\ninterface ITokenMetricData {\n  market_data: {\n    price_usd: number;\n    price_btc: number;\n    volume_last_24_hours: number;\n  };\n  marketcap: {\n    current_marketcap_usd: number;\n  };\n}\n\nconst tokenDataObj: ITokenData = {\n  symbol: '',\n  slug: '',\n  name: ''\n};\n\nconst StyledACTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: 'white',\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: 'white',\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: 'white',\n        color: 'white'\n      },\n      '&:hover fieldset': {\n        borderColor: 'white',\n        color: 'white'\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: 'white',\n        color: 'white'\n      },\n    },\n    color: 'white',\n  },\n})(TextField);\n\nconst tokenMetricData: ITokenMetricData = {\n  market_data: {\n    price_usd: undefined || 0,\n    price_btc: undefined || 0,\n    volume_last_24_hours: undefined || 0\n  },\n  marketcap: {\n    current_marketcap_usd: undefined || 0\n  }\n};\n\nconst App = () => {\n  const classes = useStyles();\n  const [allTokens, setAllTokens] = React.useState([]);\n  const [selectedToken, setSelectedToken] = React.useState(tokenDataObj);\n  const [selectedTokenMetricTimeData, setSelectedTokenMetricTimeData] = React.useState([]);\n  const [selectedTokenMetricData, setSelectedTokenMetricData] = React.useState(tokenMetricData);\n  const internationalNumberFormat = new Intl.NumberFormat('en-US');\n\n  useEffect(() => {\n    getTokenList().catch((errResp) => console.error(errResp));\n  }, []);\n\n  useEffect(() => {\n    if (!selectedToken?.symbol) return;\n    getTokenMetricData(selectedToken).catch((errResp) => console.error(errResp));\n    getTokenTimeMetricData(selectedToken).catch((errResp) => console.error(errResp));\n  }, [selectedToken]);\n\n  const getTokenList = async () => {\n    const messariTokenListResp = await axios.get('https://data.messari.io/api/v2/assets?limit=500');\n    if (messariTokenListResp.data.data) {\n      setAllTokens(messariTokenListResp.data.data);\n    }\n  };\n\n  const getTokenMetricData = async (tokenData: ITokenData) => {\n    const messariTokenMetricDataResp = await axios.get(\n        `https://data.messari.io/api/v1/assets/${tokenData.slug}/metrics`\n    );\n    if (messariTokenMetricDataResp.data.data) {\n      setSelectedTokenMetricData(messariTokenMetricDataResp.data.data);\n    }\n  };\n\n  const getTokenTimeMetricData = async (tokenData: ITokenData) => {\n    const messariTokenMetricTimeDataResp = await axios.get(\n        `https://data.messari.io/api/v1/assets/${tokenData.symbol}/metrics/price/time-series?start=2021-01-01&end=2021-02-01&interval=1d`\n    );\n    if (messariTokenMetricTimeDataResp?.data?.data?.values) {\n      setSelectedTokenMetricTimeData(messariTokenMetricTimeDataResp.data.data.values);\n    }\n  };\n\n  const handleGraph = (timeData: string[], quoteSymbol: ITokenData) => {\n    const dataTable = anychart.data.table();\n    dataTable.addData(timeData);\n    // map loaded data for the ohlc series\n    const mapping = dataTable.mapAs({\n      open: 1,\n      high: 2,\n      low: 3,\n      close: 4,\n      value: 5\n    });\n\n    // create stock chart\n    const chart = anychart.stock();\n\n    // set chart title\n    chart.title(`${quoteSymbol.symbol} - ${quoteSymbol.name}`);\n\n    // create first plot on the chart and set settings\n    const plot = chart.plot(0);\n    plot.height('75%').yGrid(true).xGrid(true).yMinorGrid(true).xMinorGrid(true);\n\n    // create candlestick series\n    const series = plot.candlestick(mapping);\n    series.name(`${quoteSymbol.symbol} - ${quoteSymbol.name}`);\n    series.legendItem().iconType('rising-falling');\n\n    // create second plot\n    const volumePlot = chart.plot(1);\n    // set yAxis labels formatter\n    volumePlot.yAxis().labels().format('{%Value}{scale:(1000)(1)|(k)}');\n    // set crosshair y-label formatter\n    volumePlot.crosshair().yLabel().format('{%Value}{scale:(1000)(1)|(k)}');\n\n    // create volume series on the plot\n    const volumeSeries = volumePlot.column(mapping);\n    // set series settings\n    volumeSeries.name('Volume');\n\n    // create scroller series with mapped data\n    chart.scroller().area(mapping);\n\n    // set container id for the chart\n    chart.container('container');\n    // initiate chart drawing\n    chart.draw();\n\n    // create range picker\n    const rangePicker = anychart.ui.rangePicker();\n    // init range picker\n    rangePicker.render(chart);\n\n    // create range selector\n    const rangeSelector = anychart.ui.rangeSelector();\n    // init range selector\n    rangeSelector.render(chart);\n\n    chart.scroller().enabled(false);\n\n    return chart;\n  };\n\n  const tokenData = () => {\n    if (selectedTokenMetricTimeData?.length && selectedToken && selectedTokenMetricData) {\n      return (\n        <Card className={classes.tableContainer}>\n          <div className={classes.statsContainer}>\n            <span className={classes.stats}>\n              Current Price USD: ${internationalNumberFormat.format(selectedTokenMetricData.market_data.price_usd)}\n            </span>\n            <span className={classes.stats}>\n              Current Price BTC: {selectedTokenMetricData.market_data.price_btc.toFixed(12)}\n            </span>\n          \n            <span className={classes.stats}>\n              Volume: ${internationalNumberFormat.format(selectedTokenMetricData.market_data.volume_last_24_hours)}\n            </span>\n            <span className={classes.stats}>\n              Market Cap: ${internationalNumberFormat.format(selectedTokenMetricData.marketcap.current_marketcap_usd)}\n            </span>\n          </div>\n          <AnyChart height={600} id={`coinChart`} instance={handleGraph(selectedTokenMetricTimeData, selectedToken)} />\n        </Card>\n      );\n    }\n    return <div></div>;\n  };\n\n  const renderAutocomplete = () => {\n    if (!allTokens.length) {\n      return (\n          <h2 className={classes.loading}>Loading...</h2>\n      )\n    }\n    return (\n        <Autocomplete\n            id='messari-token-list'\n            style={{ width: 300, margin: '16px auto', color: 'white' }}\n            options={allTokens}\n            classes={{\n              option: classes.option\n            }}\n            value={selectedToken}\n            onChange={(event: any, newValue: ITokenData | null) => {\n              if (newValue) setSelectedToken(newValue);\n            }}\n            autoHighlight\n            getOptionLabel={(option: { symbol: string; name: string }) =>\n                option?.symbol ? `${option?.symbol} - ${option?.name}` : ''\n            }\n            renderOption={(option: { symbol: string; name: string }) => (\n                <React.Fragment>{option?.symbol ? `${option?.symbol} - ${option?.name}` : ''}</React.Fragment>\n            )}\n            renderInput={(\n                params:\n                    | (JSX.IntrinsicAttributes & StandardTextFieldProps)\n                    | (JSX.IntrinsicAttributes & FilledTextFieldProps)\n                    | (JSX.IntrinsicAttributes & OutlinedTextFieldProps)\n            ) => (\n                <StyledACTextField\n                    {...params}\n                    label='Search for a Token'\n                    variant='outlined'\n                    inputProps={{\n                      ...params.inputProps,\n                      autoComplete: 'new-password' // disable autocomplete and autofill\n                    }}\n                />\n            )}\n        />\n    )\n  }\n\n\n  return (\n      <div className={'primaryBackground'}>\n        <h1 className={classes.welcomeMsg}>Welcome to Adam's Messari Challenge</h1>\n        {renderAutocomplete()}\n        {tokenData()}\n      </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}